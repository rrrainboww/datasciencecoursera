# Yifang Chen, Xiaowen Yang
# CSE 160
# Mar 6th 2016
# Final Project

import matplotlib.pyplot as plt
import csv
from operator import itemgetter

def read_csv(filename, keywords):
    '''
    Read CSV file as a dictionary and put each row of dictionary into four
    sublists of a big list base on their keywords.
    
    Parameter: 
        filename: a string
        keywords: a list of keywords from the first column of the file
        
    Output: 
        a list with four sublists which contains the entries from a certain
        keyword
    '''
    input_dict = csv.DictReader(open(filename))
    list_of_dict = [[],[],[],[]]
    for items in input_dict:
        for i in range(len(list_of_dict)):
            if items['KEYWORD_IN'] == keywords[i]:
                list_of_dict[i].append(items)
    return list_of_dict
    
def requirement_list(input_list, keywords, keyword, requirement):
    '''
    collect all values that has the input 'requirement' as the key from a
    sublist of a given keyword and return them as a list.
    
    Parameter:
        the input list
        keywords : a list
        keyword: a string
        requirement: a string
        
    Output:
        a list of strings
    '''
    result_list = []
    for items in input_list[keywords.index(keyword)]:
        if items[requirement] != '':
            result_list.append(items[requirement])
    return result_list
    
def sort_time_period(time_list): 
    '''
    Given a list that contains times and discard the entries repersenting times
    that are over a month. Then group the remaining entries by every 5 days.
    There are six groups in total. Count the number of entries in each group and
    return the numbers as a list.
    
    Parameter: 
        time_list: a list that represents time periods
    
    Output:
        a list that stores the frequencies of each 5-day periods.
    '''
    result_list = [0] * 6
    #time_range1 = [1,5,10,15,20,25]
    #time_range2 = [6,11,16,21,26,31]
    days_list = []
    for i in time_list:
        i = i.replace('days', 'day')
        i = i.split()
        if 'day' in i:         
            days_list.append(int(i[0]))
    
    for times in days_list:
        result_list[(times - 1) / 5] += 1
    return result_list
    
def plot_time(lists_of_times, keywords):
    plt.clf()
    x_axis = ["1 to 5 days", "6 to 10 days", "11 to 15 days", "16 to 20 days", "21 to 25 days", "26 to 30 days"]
    x = [i for i in range(6)]
    plt.xticks(x, x_axis)
    plt.xlabel('5_day_period')
    plt.ylabel('Frequency of jobs')
    for j in range(len(lists_of_times)):
#    print lists_of_times[0]
        y_value = [num for num in lists_of_times[j]]
#    print x, y_value
        plt.plot(x, y_value)
    plt.legend(keywords)        
    plt.savefig('time_rank.png')
     
def plot_location(location_list, keyword):
    location_rank_list = rank_location(location_list)
    x = [i for i in range(10)]
    x_value = [name[0] for name in location_rank_list[0:10]]
    y_value = [name[1] for name in location_rank_list[0:10]]
    plt.clf()
    plt.xticks(x, x_value)
    plt.plot(x, y_value)
    plt.legend([keyword])
    plt.xlabel('State')
    plt.ylabel('Frequency')
    plt.savefig(keyword + ' location_rank.png')
    plt.show()
   

def rank_location(location_list):
    '''
    Parameter: a list of location for a type of job
    
    output: 
    return a dictionary ranking the sum of of area distribution for this 
    type of job from highest to lowest. key of the dictionary is the state where
    the job appeared and value is the number of frequency of that state appeared 
    in this type of jobs.
    '''
    state_frequency = {}
    for location in location_list:
        location = location.split(',')
        state_frequency.setdefault(location[len(location) - 1], 0)
        state_frequency[location[len(location) - 1]] += 1
    sorted_by_frequency = sorted(state_frequency.items(), key = itemgetter(1), reverse = True)
    return sorted_by_frequency

def rank_website(website_list):
    '''
    Parameter: a list of website sources for a type of job
    
    return a dictionary ranking the sum of number of postings for that type of 
    job appearing in each website from highest to lowest. key is name of the 
    website and value is the number of frequency of that type of jobs appeared 
    in this website
    '''
    web_job_dict = {}
    for element in website_list:
        web_job_dict.setdefault(element, 0)
        web_job_dict[element] += 1
    sort_by_website = sorted(web_job_dict.items(), key = itemgetter(1), reverse = True)
    return sort_by_website
        
    
def list_of_list(input_list, keywords):
    '''
    Parameter: a list of list of dictionaries returned from readcsv() function
    keywords is a list of keywords 
    
    
    plot time_rank graph with x axis: a list of time range and y axis: a list of 
    frequencies in each of the time range
    
    plot location_rank graph with x axis: a list of the first 10 states of the 
    highest job postings of a specific type of job and y axis: a list of job 
    posting frequencies for those first 10 states
    
    print the ranking of sum of the number of postings for each type of job 
    appearing in each website
    '''
    time_lists = []
    for i in range(len(keywords)):
        time_lists.append(sort_time_period(requirement_list(input_list, keywords, keywords[i], 'TIME')))
    plot_time(time_lists, keywords)
    
    for keyword in keywords:
        location_list = requirement_list(input_list, keywords, keyword, 'LOCATION')
        plot_location(location_list, keyword)
    
    for i in range(len(keywords)):
        website_list = requirement_list(input_list, keywords, keywords[i], 'SOURCE')
        print keywords[i], ":", rank_website(website_list)
    
   
def main():
    keywords = ['BIG DATA', 'MANAGEMENT', 'MEDIA', 'DESIGN']
    input_list = read_csv("ScriptData.csv", keywords)

    list_of_list(input_list, keywords)

if __name__ == "__main__":
    main()


